#!/bin/bash

version="v1.1.0"

# Slowest supported by your burner is the default, but some speeds are better then others depening on drive. TODO: Make an argument that specifies this
burn_speed=1

# Save the main directory containing the dcdib script so we can use absolute filepaths to execute cdrecord from inside the tmp directory we create next
cd "$(dirname "$0")"

echo -e "Dreamcast CDI Burner $version\nBy Alex Free\n"

unmount_cd () 
{
    ( pumount cdrom ||              # Easiest
          umount /media/cdrom ||        # Most common
          umount /mnt/cdrom             # For old systems
    )> /dev/null 2>&1  || true
}

if [ "$#" -ne 1 ] && [ "$#" -ne 2 ]; then
    echo -e "Usage:\ndcdib <file> <cd burner device>\n\n<file> is either a CDI file OR a supported compressed archive (7z/xz/cab/zip/gzip/bzip2/tar) containing a CDI file.\n\n<cd burner device> is OPTIONAL and should only be given if the default CD burner device devname is not working for your OS."
    exit 1
fi

if [ $EUID -ne 0 ]; then
    echo "Error: DCDIB requires sudo privilages to ensure that buffer under-runs do not occur when burning to disc, and to ensure succesful access to your burning hardware."
    exit 1
fi

if [ "$#" -eq 2 ]; then # Explicitly set your own device for the CD burner, which can change on different OSes.
    echo -e "Info: Using explicitly specified CD burner device from second argument: "$2"\n"
    device="$2"
else # This works on most Linux distros
    echo -e "Info: Using default CD burner device: /dev/sr0\n"
    device="/dev/sr0"
fi

# When this script exits, automatically delete the temp directory.
cleanup() 
{ 
    if [[ -e "$tmp" ]]; then
        echo "Clearing temp files..."  
        rm -r "$tmp"   
    fi
}
trap cleanup EXIT

# Put temp directory in /tmp (or whatever the OS prefers)
tmp=$(mktemp -d --tmpdir cdib.XXX)

if [ ! -f "$1" ]; then
    echo "Error: Can not open file: "$1"\n"
    exit 1
else
 # Interesting, file command misreports cdi file type. So we need to use cdirip itself to see if it is a CDI file or not. If it isn't try to extract it with 7-zip
    if bin/cdirip "$1" | grep "Unsupported image version" > /dev/null 2>&1; then
        bin/7za e "$1" -o$tmp
        multiple_cdi_files=$(ls -1a $tmp/*.cdi $tmp/*.CDI 2> /dev/null | wc -l)

        if [[ $multiple_cdi_files -gt 1 ]]; then
            echo -e "\nError: multiple CDI files found in archive file: $1 :\n"
            ls -1a $tmp/*.cdi $tmp/*.CDI 2> /dev/null
            echo -e "\nOnly one CDI file with extension .cdi or .CDI can be in the archive file: $1 for it to be supported for prooccessing by DCDIB"
            exit 1
        fi

        if [[ $multiple_cdi_files -eq 0 ]]; then
            echo "Error: No CDI file with either extension .cdi or .CDI found in the the archive file $1"
            exit 1
        fi
        extracted_cdi_file=$(ls -1a  $tmp/*.cdi $tmp/*.CDI 2> /dev/null)
       # echo "Extracting CDI file: $extracted_cdi_file..."
        bin/cdirip "$extracted_cdi_file" $tmp
    else
        echo "Extracting CDI file: $1..."
        bin/cdirip "$1" $tmp 
    fi
fi

# Print out any uncaught errors.
err() 
{	
    echo -e "\nUncaught error in $0, line number: $BASH_LINENO" >&2
}
trap err ERR

# If any command unexpectedly exits with an error, quit the whole script. 
set -e 

# There are 2 different main kinds of CDI images that we need to burn differently. DATA session 1 + DATA session 2 and AUDIO session 1 + AUDIO session 2.
# Technically you could however say there are 4 different kinds:
# - Data ISO + DATA ISO
# - WAV/audio track + DATA ISO
# - Multiple CDDA WAVs/audio tracks + DATA ISO
# - Multiple CDDA WAVs/audio tracks in an ISO + DATA ISO

if [ -f "$tmp/taudio01.wav" ]; then
    echo "Detected CDI Type: WAV Track 1"
    unmount_cd
    bin/cdrecord -speed=$burn_speed -v dev=$device -dao -multi $tmp/*.wav
    unmount_cd
    bin/cdrecord -eject -overburn -speed=$burn_speed -v dev=$device -tao -xa $tmp/*.iso
    unmount_cd
elif [ -f "$tmp/tdata01.iso" ]; then
    echo "Detected CDI Type: ISO Track 1"
    unmount_cd
    bin/cdrecord -speed=$burn_speed -v dev=$device -tao -multi -xa $tmp/tdata01.iso
    unmount_cd
    bin/cdrecord -eject -overburn -speed=$burn_speed -v dev=$device -tao -xa $tmp/tdata02.iso
    unmount_cd
else
    echo "Error: failed to Find burn files, nothing has been burned to disc!"
    ls "$tmp"
    exit 1
fi

unmount_cd
echo "Ejecting CD-R, please wait..."
eject || true
echo "Complete!"
